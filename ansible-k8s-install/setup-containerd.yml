---
- name: Set hostnames for master and worker nodes
  hosts: k8s
  become: yes
  tasks:
    - name: Set hostname for master and worker nodes
      hostname:
        name: "{{ inventory_hostname }}"

- name: Kubernetes setup tasks
  hosts: k8s
  become: yes
  tasks:
    
    - name: Update apt repositories
      apt:
        update_cache: yes
    
    - name: Install required packages
      apt:
        name:
          - curl
          - wget
          - net-tools
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
        state: present
    
    - name: Stop and disable ufw (firewall)
      systemd:
        name: ufw
        state: stopped
        enabled: no
    
    - name: Disable swap
      command: swapoff -a

    - name: Remove swap entry from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*'
        state: absent 
    - name: Load kernel modules for Kubernetes
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
      notify:
        - Load modules

    - name: Load overlay module
      command: modprobe overlay
      when: ansible_facts['os_family'] == 'Debian'

    - name: Load br_netfilter module
      command: modprobe br_netfilter
      when: ansible_facts['os_family'] == 'Debian'

    - name: Check br_netfilter module is loaded
      shell: lsmod | grep br_netfilter
      register: br_netfilter_loaded
      changed_when: false

    - name: Show the output of lsmod
      debug:
        var: br_netfilter_loaded.stdout

    - name: Set sysctl parameters for Kubernetes
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.ipv4.tcp_max_syn_backlog = 40000
          net.core.somaxconn = 40000
          net.core.wmem_default = 8388608
          net.core.rmem_default = 8388608
          net.ipv4.tcp_sack = 1
          net.ipv4.tcp_window_scaling = 1
          net.ipv4.tcp_fin_timeout = 15
          net.ipv4.tcp_keepalive_intvl = 30
          net.ipv4.tcp_tw_reuse = 1
          net.ipv4.tcp_moderate_rcvbuf = 1
          net.core.rmem_max = 134217728
          net.core.wmem_max = 134217728
          net.ipv4.tcp_mem = 134217728 134217728 134217728
          net.ipv4.tcp_rmem = 4096 277750 134217728
          net.ipv4.tcp_wmem = 4096 277750 134217728
          net.core.netdev_max_backlog = 300000
      notify:
        - Apply sysctl changes

  handlers:
    - name: Load modules
      command: modprobe overlay && modprobe br_netfilter

    - name: Apply sysctl changes
      command: sysctl -p /etc/sysctl.d/k8s.conf

- name: Kubernetes containerd setup
  hosts: k8s
  become: yes
  tasks:

    - name: Install required packages
      apt:
        name:
          - curl
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
        state: present
      become: yes


    - name: Gather Ubuntu version
      command: lsb_release -cs
      register: ubuntu_version
      changed_when: false

    - name: Add Docker repository key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    

    - name: Add Docker repository
      shell: |
        sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      become: yes

    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install containerd.io package
      block:
        - apt:
            name: containerd.io
            state: present
            update_cache: yes
      rescue:
        - name: Remove dpkg lock files if they exist
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /var/lib/dpkg/lock
            - /var/lib/dpkg/lock-frontend

        - name: Reconfigure dpkg if there are broken dependencies or locks
          command: dpkg --configure -a

        - name: Wait for apt lock to be released (if still present)
          shell: |
            while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
              sleep 1
            done
          become: yes

        - name: Retry installing containerd.io package
          apt:
            name: containerd.io
            state: present
            update_cache: yes

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Generate containerd default config
      command: containerd config default
      register: containerd_config
      changed_when: false

    - name: Save containerd default config
      copy:
        content: "{{ containerd_config.stdout }}"
        dest: /etc/containerd/config.toml

    - name: Modify containerd config for systemd cgroup
      become: yes
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^#?\s*SystemdCgroup\s*=\s*false'
        line: 'SystemdCgroup = true'
        backup: yes  # Yedek alarak değiştirme

    - name: Restart and enable containerd service
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: Check containerd service status
      systemd:
        name: containerd
        state: started
        enabled: yes
      register: containerd_status

